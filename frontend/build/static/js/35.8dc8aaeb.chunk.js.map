{"version":3,"sources":["../node_modules/react-bootstrap/esm/Table.js","api/complaintApi.js","api/dashboardApi.js","app/complaints/complaintreport.js"],"names":["Table","React","forwardRef","_ref","ref","bsPrefix","className","striped","bordered","borderless","hover","size","variant","responsive","props","_objectWithoutPropertiesLoose","decoratedBsPrefix","useBootstrapPrefix","classes","classNames","table","createElement","_extends","responsiveClass","baseurl","ComplaintApi","getDepartmentList","axios","getUserList","getMachineList","getComplaintStatus","getComplaintData","data1","console","log","fetch","method","headers","body","JSON","stringify","insertComplaintData","data","saveComplaintData","checkCount","dasboardApi","getLineData","getShiftData","getBlock","getCurrentLineStatus","getChartData","getPieChartData","getGridData","getLineBreakageTimmings","getLabelsData","getOEETrendData","getComplainData","getLineDetails","ComplaintReport","useState","line","setLine","status","setStatus","enddate","setEndDate","machine","setMachine","linedata","setLineData","startdate","setStartDate","countData","setCountData","lineFlag","setLineFlag","department","setDepartment","machinedata","setMachineData","statusFlag","setStatusFlag","machineFlag","setMachineFlag","complaintdata","setComplaintData","deparmentdata","setDepartmentData","departmentFlag","setDepartmentFlag","useCallback","then","res","getData","length","toast","warn","json","info","excelExport","apiData","filename","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","type","Blob","FileSaver","exportToCSV","useEffect","position","autoClose","hideProgressBar","newestOnTop","theme","onChange","value","handleline","isDisabled","options","map","ele","LineCode","label","LineName","key","Check","inline","e","name","id","toString","handlemachine","Id","MachineName","handledepartment","DepartmentKey","Department","handlestatus","StatusKey","StatusValue","Group","controlId","Control","target","handleStartdate","placeholder","handleEnddate","onClick","disabled","item","_id","Tag","Status","Count"],"mappings":"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","file":"static/js/35.8dc8aaeb.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport classNames from 'classnames';\r\nimport React from 'react';\r\nimport { useBootstrapPrefix } from './ThemeProvider';\r\nvar Table = React.forwardRef(function (_ref, ref) {\r\n  var bsPrefix = _ref.bsPrefix,\r\n      className = _ref.className,\r\n      striped = _ref.striped,\r\n      bordered = _ref.bordered,\r\n      borderless = _ref.borderless,\r\n      hover = _ref.hover,\r\n      size = _ref.size,\r\n      variant = _ref.variant,\r\n      responsive = _ref.responsive,\r\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"striped\", \"bordered\", \"borderless\", \"hover\", \"size\", \"variant\", \"responsive\"]);\r\n\r\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\r\n  var classes = classNames(className, decoratedBsPrefix, variant && decoratedBsPrefix + \"-\" + variant, size && decoratedBsPrefix + \"-\" + size, striped && decoratedBsPrefix + \"-striped\", bordered && decoratedBsPrefix + \"-bordered\", borderless && decoratedBsPrefix + \"-borderless\", hover && decoratedBsPrefix + \"-hover\");\r\n  var table = React.createElement(\"table\", _extends({}, props, {\r\n    className: classes,\r\n    ref: ref\r\n  }));\r\n\r\n  if (responsive) {\r\n    var responsiveClass = decoratedBsPrefix + \"-responsive\";\r\n\r\n    if (typeof responsive === 'string') {\r\n      responsiveClass = responsiveClass + \"-\" + responsive;\r\n    }\r\n\r\n    return React.createElement(\"div\", {\r\n      className: responsiveClass\r\n    }, table);\r\n  }\r\n\r\n  return table;\r\n});\r\nexport default Table;","import axios from \"axios\"\r\nlet baseurl='http://localhost:5000/anzo/complaint'\r\n\r\n\r\nconst ComplaintApi = {\r\n    getDepartmentList:function()\r\n    {\r\n        return  axios({\r\n            \"method\": \"GET\",\r\n            \"url\": `${baseurl}/departmentlist`,\r\n            \"headers\": {\r\n              \"content-type\": \"application/json\",\r\n              \r\n            }\r\n          })\r\n    },\r\n    getUserList:function()\r\n    {\r\n        return  axios({\r\n            \"method\": \"GET\",\r\n            \"url\": `${baseurl}/userlist`,\r\n            \"headers\": {\r\n              \"content-type\": \"application/json\",\r\n              \r\n            }\r\n          })\r\n    },\r\n    getMachineList:function()\r\n    {\r\n        return  axios({\r\n            \"method\": \"GET\",\r\n            \"url\": `${baseurl}/machinelist`,\r\n            \"headers\": {\r\n              \"content-type\": \"application/json\",\r\n              \r\n            }\r\n          })\r\n    },\r\n\r\n    getComplaintStatus:function()\r\n    {\r\n        return  axios({\r\n            \"method\": \"GET\",\r\n            \"url\": `${baseurl}/complaintstatus`,\r\n            \"headers\": {\r\n              \"content-type\": \"application/json\",\r\n              \r\n            }\r\n          })\r\n    },\r\n    getComplaintData:function(data1) {\r\n        console.log(\"getComplaintData api\",data1)\r\n        return fetch(`${baseurl}/complaintdata`, {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"content-type\": \"application/json\",\r\n              \r\n            },\r\n            body: JSON.stringify(data1),\r\n          })\r\n      }, \r\n      insertComplaintData:function(data) {\r\n        console.log(\"getComplaintData api\",data)\r\n        return fetch(`${baseurl}/insertcomplaintdata`, {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"content-type\": \"application/json\",\r\n              \r\n            },\r\n            body: JSON.stringify(data),\r\n          })\r\n      } ,\r\n\r\n      saveComplaintData:function(data) {\r\n        console.log(\"getComplaintData api\",data)\r\n        return fetch(`${baseurl}/savecomplaintdata`, {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"content-type\": \"application/json\",\r\n              \r\n            },\r\n            body: JSON.stringify(data),\r\n          })\r\n      } ,\r\n\r\n      checkCount:function(data) {\r\n        console.log(\"checkount\",data)\r\n        return fetch(`${baseurl}/exportcomplaint`, {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"content-type\": \"application/json\",\r\n              \r\n            },\r\n            body: JSON.stringify(data),\r\n          })\r\n      } ,\r\n}\r\n\r\n\r\n\r\nexport default ComplaintApi","import axios from \"axios\"\r\nlet baseurl='http://localhost:5000/anzo/dashboard'\r\n\r\nconst dasboardApi = {\r\n    getLineData:function()\r\n    {\r\n        return  axios({\r\n            \"method\": \"GET\",\r\n            \"url\": `${baseurl}/linedata`,\r\n            \"headers\": {\r\n              \"content-type\": \"application/json\",\r\n              \r\n            }\r\n          })\r\n    },\r\n\r\n    getShiftData:function()\r\n    {\r\n        return axios({\r\n          \"method\":\"GET\",\r\n          \"url\": `${baseurl}/shiftdata`,\r\n          \"headers\": {\r\n            \"content-type\":\"application/json\",\r\n          }\r\n        })\r\n    },\r\n\r\n    getBlock:function()\r\n    {\r\n        return axios({\r\n          \"method\":\"GET\",\r\n          \"url\": `${baseurl}/block`,\r\n          \"headers\": {\r\n            \"content-type\":\"application/json\",\r\n          }\r\n        })\r\n    },\r\n\r\n    getCurrentLineStatus:function()\r\n    {\r\n        return axios({\r\n          \"method\":\"GET\",\r\n          \"url\": `${baseurl}/currentlinestatus`,\r\n          \"headers\": {\r\n            \"content-type\":\"application/json\",\r\n          }\r\n        })\r\n    },\r\n    getChartData:function(data)\r\n    \r\n    {  \r\n      \r\n    return fetch(`${baseurl}/chartdata`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n        \r\n      },\r\n      body: JSON.stringify(data),\r\n    })\r\n           \r\n        // return axios({\r\n        //   \"method\":\"GET\",\r\n        //   \"url\": `${baseurl}/chartdata`,\r\n        //   \"headers\": {\r\n        //     \"content-type\":\"application/json\",\r\n        //   },\r\n        //   body: JSON.stringify(data),\r\n        // })\r\n    },\r\n    getPieChartData:function(data)\r\n    {\r\n      return fetch(`${baseurl}/piechartdata`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n          \r\n        },\r\n        body: JSON.stringify(data),\r\n      })\r\n    },\r\n    getGridData:function(data)\r\n    {\r\n      return fetch(`${baseurl}/griddata`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n          \r\n        },\r\n        body: JSON.stringify(data),\r\n      })\r\n    },\r\n    getLineBreakageTimmings:function(data)\r\n    {\r\n      return fetch(`${baseurl}/linebreakagetimmings`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n          \r\n        },\r\n        body: JSON.stringify(data),\r\n      })\r\n    },\r\n    getLabelsData:function(data)\r\n    {\r\n      return fetch(`${baseurl}/labeldata`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n          \r\n        },\r\n        body: JSON.stringify(data),\r\n      })\r\n    },\r\n    getOEETrendData:function(data)\r\n    {\r\n      return fetch(`${baseurl}/oeetrenddata`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n          \r\n        },\r\n        body: JSON.stringify(data),\r\n      })\r\n    },\r\n    getComplainData:function(data)\r\n    {\r\n      return fetch(`${baseurl}/complaindata`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n          \r\n        },\r\n        body: JSON.stringify(data),\r\n      })\r\n    },\r\n\r\n    getLineDetails:function(data)\r\n    {\r\n      return fetch(`${baseurl}/linedetails`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n          \r\n        },\r\n        body: JSON.stringify(data),\r\n      })\r\n    },\r\n}\r\n\r\nexport default dasboardApi","\r\nimport React, { Component, useCallback, useEffect, useState } from \"react\";\r\nimport Select from \"react-select\";\r\nimport { Table } from 'react-bootstrap';\r\nimport DatePicker from \"react-datepicker\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport dasboardApi from \"../../api/dashboardApi\"\r\nimport ComplaintApi from \"../../api/complaintApi\"\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\n\r\n\r\nconst ComplaintReport = () =>{\r\n  const[line,setLine] = useState([])\r\n  const[status,setStatus] = useState(\"1\")\r\n  const[enddate,setEndDate] = useState([])\r\n  const[machine,setMachine] = useState([])\r\n  const[linedata,setLineData] = useState([])\r\n  const[startdate,setStartDate] = useState([])\r\n  const[countData,setCountData] = useState([])\r\n  const[complaint,setComplaint] = useState([])\r\n  const[lineFlag,setLineFlag] = useState(false)\r\n  const[department,setDepartment] = useState([])\r\n  const[machinedata,setMachineData] = useState([])\r\n  const[statusFlag,setStatusFlag] = useState(false)\r\n  const[machineFlag,setMachineFlag] = useState(false)\r\n  const[complaintdata,setComplaintData] = useState([])\r\n  const[deparmentdata,setDepartmentData] = useState([])\r\n  const[departmentFlag,setDepartmentFlag] = useState(false)\r\n \r\n\r\n  const fileType =\r\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n  const filename = \"complaintStatus_All\"\r\n  const fileExtension = \".xlsx\";\r\n\r\n\r\n\r\n  const getLineData = useCallback(()=>{\r\n    dasboardApi.getLineData()\r\n    .then((res)=>{\r\n      console.log(\"getLineData\",res.data)\r\n      setLineData(res.data)\r\n    })\r\n  })\r\n\r\n  const getDepartmentList = useCallback(()=>{\r\n    ComplaintApi.getDepartmentList()\r\n    .then((res)=>{\r\n      console.log(\"getDepartmentList\",res.data)\r\n      setDepartmentData(res.data)\r\n     \r\n    })\r\n    \r\n  })\r\n\r\n\r\n  const getMachineList = useCallback(()=>{\r\n    ComplaintApi.getMachineList()\r\n    .then((res)=>{\r\n      console.log(\"getMachineList\",res.data)\r\n      setMachineData(res.data)\r\n     \r\n    })\r\n    \r\n  })\r\n\r\n  const getComplaintStatus = useCallback(()=>{\r\n    ComplaintApi.getComplaintStatus()\r\n    .then((res)=>{\r\n      console.log(\"getComplaintStatus\",res.data)\r\n      setComplaintData(res.data)\r\n     // setMachineData(res.data)\r\n     \r\n    })\r\n    \r\n  })\r\n  // const getComplaintData = useCallback(()=>{\r\n  //   ComplaintApi.getComplaintData({line})\r\n  //   .then((res) => res.json())\r\n  //   .then((data) => {\r\n     \r\n  //          console.log(\"getComplaintDataoooo\",data.recordsets[2])\r\n  //          setComplaint(data.recordsets[2])\r\n     \r\n  //         })\r\n    \r\n  // })\r\n  const getData = useCallback(()=>{\r\n    if (line.length == 0 || machine.length == 0 || department.length == 0 || status == 0 || startdate == 0 || enddate == 0) {\r\n     toast.warn(\"Some field is missing\")\r\n      \r\n    } else {\r\n      ComplaintApi.checkCount({line,machine,department,status,startdate,enddate})\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n       \r\n              console.log(\"allllllllll\",data)\r\n            data.length?  toast.info(`Status fetch Successfully`) : toast.info(`No data available for Current Inputs`)\r\n              setCountData(data)\r\n           \r\n         \r\n          \r\n            })\r\n    }\r\n   \r\n    \r\n        \r\n\r\n//         else if(lineFlag === true){\r\n//           let line = 'All'\r\n//           ComplaintApi.checkCount({line,machine,department,status,startdate,enddate})\r\n//           .then((res) => res.json())\r\n//           .then((data) => {\r\n           \r\n//                  console.log(\"response with allline\",data)\r\n//                  setCountData(data)\r\n             \r\n              \r\n//                 })\r\n      \r\n//      }\r\n//      else if(machineFlag === true){\r\n//       ComplaintApi.checkCount({line,allmachines,department,status,startdate,enddate})\r\n//       .then((res) => res.json())\r\n//       .then((data) => {\r\n       \r\n//              console.log(\"response with all machine\",data)\r\n//              setCountData()\r\n         \r\n          \r\n//             })\r\n  \r\n//  }   else if(departmentFlag=== true){\r\n//   ComplaintApi.checkCount({line,machine,alldepartment,status,startdate,enddate})\r\n//   .then((res) => res.json())\r\n//   .then((data) => {\r\n   \r\n//          console.log(\"response with all department\",data)\r\n//          setCountData()\r\n     \r\n      \r\n//         })\r\n\r\n// }  else if(statusFlag=== true){\r\n//   ComplaintApi.checkCount({line,machine,department,allstatus,startdate,enddate})\r\n//   .then((res) => res.json())\r\n//   .then((data) => {\r\n   \r\n//          console.log(\"response with all status\",data)\r\n//          setCountData()\r\n     \r\n      \r\n//         })\r\n\r\n// } else{\r\n//   ComplaintApi.checkCount({line,machine,department,status,startdate,enddate})\r\n//   .then((res) => res.json())\r\n//   .then((data) => {\r\n   \r\n//          console.log(\"response with no all\",data)\r\n//          setCountData()\r\n     \r\n      \r\n//         })\r\n// }\r\n    \r\n  })\r\n\r\n  \r\n\r\n\r\n \r\n\r\n  const handleline = (value) =>{\r\n   \r\n \r\n    setLine(value.value)\r\n   \r\n  \r\n   \r\n}\r\n\r\nconst handlemachine = (label) => {\r\n  \r\n  setMachine(label.value.toString())\r\n \r\n}\r\n\r\n\r\n\r\nconst handledepartment = (label) => {\r\n \r\n\r\n  setDepartment(label.value)\r\n  //setMachine(lablel)\r\n}\r\nconst handlestatus = (label) =>{\r\n\r\n  setStatus(label.value)\r\n\r\n\r\n}\r\n\r\n\r\n\r\nconst handleStartdate =(e)=> {\r\n\r\n  setStartDate(e.target.value)\r\n\r\n  \r\n}\r\nconst handleEnddate =(e)=>{\r\n \r\n setEndDate(e.target.value)\r\n}\r\nconst handleallline =(e) => {\r\n   setLine('All')\r\n  setLineFlag(!lineFlag)\r\n  \r\n}\r\nconst handleallmachine =(e) => {\r\n   setMachine('All')\r\n  setMachineFlag(!machineFlag)\r\n  \r\n}\r\nconst handlealldepart =(e) => {\r\n    setDepartment('All')\r\n  setDepartmentFlag(!departmentFlag)\r\n}\r\nconst handleallstatus =(e) => {\r\n   setStatus('All')\r\n  setStatusFlag(!statusFlag)\r\n  \r\n}\r\nconst exportToCSV = (apiData, filename) => {\r\n  const ws = XLSX.utils.json_to_sheet(apiData);\r\n  const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n  const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n  const data = new Blob([excelBuffer], { type: fileType });\r\n  FileSaver.saveAs(data, filename + fileExtension);\r\n};\r\n\r\nconst excelExport = () =>{\r\n  exportToCSV(countData,filename)\r\n}\r\n\r\n  useEffect(() =>{\r\n    getLineData()\r\n   \r\n  \r\n    getMachineList()\r\n  \r\n    getDepartmentList()\r\n    getComplaintStatus()\r\n  },[]\r\n  )\r\n\r\n  console.log(\"countdata\",countData)\r\n\r\n    return(\r\n        <div className=\"bookcomplaints\">\r\n       <ToastContainer\r\nposition=\"top-right\"\r\nautoClose={5000}\r\nhideProgressBar={false}\r\nnewestOnTop={false}\r\n// closeOnClick\r\n// rtl={false}\r\n// pauseOnFocusLoss\r\n// draggable\r\n// pauseOnHover\r\ntheme=\"light\"\r\n/>\r\n<ToastContainer />\r\n       \r\n        <div className=\"card card-complaintsreport-one\">\r\n        <div className=\"card-header\">\r\n            <h7>Complaint</h7>\r\n        \r\n    \r\n                  \r\n                  </div>\r\n                \r\n               \r\n                <div className=\"card-body\">\r\n                    <h4>Export Complaint Report </h4>\r\n                 <div className=\"card card-complaintsreport-child\">\r\n                    <div className=\"card-header\">\r\n                    <div className=\"line-b-select-1\">\r\n                      <p className=\"\">Select Line:</p>\r\n                      <div className=\"container-1\">\r\n                      <Select\r\n                        onChange={(value) => handleline(value)}\r\n                       \r\n                      \r\n                        value={linedata.value}\r\n                        isDisabled={lineFlag}\r\n                        options={[\r\n                          ...linedata.map((ele) => {\r\n                           \r\n                             return {\r\n                               value: ele.LineCode,\r\n                               label: ele.LineName,\r\n                             };\r\n                           }),\r\n                        ]}\r\n                      />\r\n                      </div>\r\n                      </div>\r\n\r\n                      <div className=\"line-b-select-8\">\r\n                      \r\n                      <div className=\"container-8\">\r\n                      <Form>\r\n      {['checkbox'].map((type) => (\r\n        <div key={`inline-${type}`} className=\"mb-3\">\r\n          <Form.Check\r\n            inline\r\n            label=\"All Line\"\r\n            onChange={(e) => handleallline(e)}\r\n            name=\"group1\"\r\n            type={type}\r\n            id={`inline-${type}-1`}\r\n          />\r\n         \r\n         \r\n        </div>\r\n      ))}\r\n    </Form>\r\n                      </div>\r\n                      \r\n                    </div>\r\n\r\n\r\n                    <div className=\"line-b-select-2\">\r\n                      <p className=\"\">Machine:</p>\r\n                      <div className=\"container-2\">\r\n                      <Select\r\n                        onChange={(label) => handlemachine(label)}\r\n                        value={machinedata.label}\r\n                        isDisabled={machineFlag}\r\n                        options={[\r\n                          ...machinedata.map((ele) => {\r\n                           \r\n                           \r\n                             return {\r\n                              value: ele.Id,\r\n                              label: ele.MachineName,\r\n                             \r\n                             };\r\n                           }),\r\n                        ]}\r\n                      />\r\n                      </div>\r\n                      </div>\r\n\r\n                      <div className=\"line-b-select-9\">\r\n                      \r\n                      <div className=\"container-9\">\r\n                      <Form>\r\n      {['checkbox'].map((type) => (\r\n        <div key={`inline-${type}`} className=\"mb-3\">\r\n          <Form.Check\r\n            inline\r\n            onChange={(e) => handleallmachine(e)}\r\n            label=\"All Machines\"\r\n            name=\"group1\"\r\n            type={type}\r\n            id={`inline-${type}-1`}\r\n          />\r\n         \r\n         \r\n        </div>\r\n      ))}\r\n    </Form>\r\n                      </div>\r\n                      </div>\r\n\r\n                    <div className=\"line-b-select-3\">\r\n                      <p>Department:</p>\r\n                      <div className=\"container-3\">\r\n                      <Select\r\n                        onChange={(label) => handledepartment(label)}\r\n                        value={linedata.label}\r\n                        isDisabled={departmentFlag}\r\n                        options={[\r\n                          ...deparmentdata.map((ele) => {\r\n                           \r\n                             return {\r\n                               value: ele.DepartmentKey,\r\n                               label: ele.Department,\r\n                             };\r\n                           }),\r\n                        ]}\r\n                      />\r\n                      </div>\r\n                      </div>\r\n\r\n                      <div className=\"line-b-select-10\">\r\n                      \r\n                      <div className=\"container-10\">\r\n                      <Form>\r\n      {['checkbox'].map((type) => (\r\n        <div key={`inline-${type}`} className=\"mb-3\">\r\n          <Form.Check\r\n            inline\r\n            onChange={(e) => handlealldepart(e)}\r\n            label=\"All Department\"\r\n            name=\"group1\"\r\n            type={type}\r\n            id={`inline-${type}-1`}\r\n          />\r\n         \r\n         \r\n        </div>\r\n      ))}\r\n    </Form>\r\n                      </div>\r\n                      \r\n                    </div>\r\n                    <div className=\"line-b-select-4\">\r\n                      <p>Status:</p>\r\n                      <div className=\"container-4\">\r\n                      <Select\r\n                        onChange={(label) => handlestatus(label)}\r\n                        value={complaintdata.label}\r\n                        isDisabled={statusFlag}\r\n                        options={[\r\n                          ...complaintdata.map((ele) => {\r\n                           \r\n                             return {\r\n                               value: ele.StatusKey,\r\n                               label: ele.StatusValue,\r\n                             };\r\n                           }),\r\n                        ]}\r\n                      />\r\n                      </div>\r\n                      \r\n                    </div>\r\n\r\n                    <div className=\"line-b-select-5\">\r\n                      \r\n                      <div className=\"container-5\">\r\n                      <Form>\r\n      {['checkbox'].map((type) => (\r\n        <div key={`inline-${type}`} className=\"mb-3\">\r\n          <Form.Check\r\n            inline\r\n            onChange={(e) => handleallstatus(e)}\r\n            label=\"All Status\"\r\n            name=\"group1\"\r\n            type={type}\r\n            id={`inline-${type}-1`}\r\n          />\r\n         \r\n         \r\n        </div>\r\n      ))}\r\n    </Form>\r\n                      </div>\r\n                      \r\n                    </div>\r\n\r\n                  \r\n                      \r\n                      <div className=\"line-b-select-6\">\r\n                      <p>Start Date:</p>\r\n                      <div className=\"container-6\">\r\n                      <Form.Group controlId=\"dob\">\r\n                          \r\n                      <Form.Control\r\n                            type=\"date\"\r\n                            name=\"dob\"\r\n                            value={startdate}\r\n                            onChange={(e) => handleStartdate(e)}\r\n                            placeholder=\"\"\r\n                          />\r\n                        </Form.Group>\r\n                      </div>\r\n                      </div>\r\n\r\n                      <div className=\"line-b-select-7\">\r\n                      <p className=\"\">End Date:</p>\r\n                      <div className=\"container-7\">\r\n                      <Form.Group controlId=\"dob\">\r\n                          \r\n                      <Form.Control\r\n                             type=\"date\"\r\n                             name=\"dob\"\r\n                             value={enddate}\r\n                            onChange={(e) => handleEnddate(e)}\r\n                             placeholder=\"\"\r\n                          />\r\n                        </Form.Group>\r\n                      </div>\r\n                      </div>\r\n\r\n                      \r\n                      \r\n                  \r\n                    <button className=\"classbutton\"\r\n                      onClick={(e) => {\r\n                        getData()\r\n                      }}\r\n                    >\r\n                      Check Count\r\n                    </button>\r\n                     \r\n                    <button className=\"excelbutton\"\r\n                      onClick={(e) => { excelExport()}}\r\n                      disabled = {countData.length ? false: true}\r\n                    >\r\n                      ExportExcel\r\n                    </button>\r\n\r\n                   \r\n\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                    <div className=\"table-responsive\">\r\n              <Table bordered className=\"mg-b-0\">\r\n               \r\n                <thead>\r\n                  <tr>\r\n                    <th>LineCode</th>\r\n                    <th>Department</th>\r\n                    <th>Tag</th>\r\n                    <th>Status</th>\r\n                    <th>Count</th>\r\n                    \r\n                   \r\n                    \r\n                    \r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                {countData.map((item) => (\r\n                <tr key={item._id}>\r\n              <td>{item.LineCode}</td> \r\n              <td>{item.Department}</td>\r\n              <td>{item.Tag}</td>\r\n              <td>{item.Status}</td>\r\n              <td>{item.Count}</td>\r\n         </tr>\r\n          ))}\r\n                \r\n                \r\n                \r\n                \r\n                 \r\n                 \r\n                 \r\n                </tbody>\r\n              </Table>\r\n            </div>\r\n                        \r\n                    </div>\r\n\r\n                 </div>\r\n                 \r\n\r\n                  \r\n                </div>\r\n                {/* card-body */}\r\n              </div>\r\n    </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default ComplaintReport"],"sourceRoot":""}